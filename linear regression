# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import numpy as np
import pandas as pd

data = pd.read_csv('../input/22bris/22BRIS.csv')
data.head()

X = data['JKSE'].values
Y = data['BRIS'].values

#rata-rata X dan Y
mean_X = np.mean(X)
mean_Y = np.mean(Y)

#total number of value
m = len(X)

#menentukan kontanta(b0) dan m(b1) y=mx+c

#jumlah X - rata rata X . Y - rata rata Y diinisiasikan sebagai number
#jumlah X - rata rata X pankat 2 diinisiasikan sebagai denom
number = 0
denom = 0
for i in range(m):
    number += (X[i] - mean_X) * (Y[i] - mean_Y)
    denom += (X[i] - mean_X) ** 2

print(number,denom)
    
#mencari m(b1) m=number/denom
b1 = number/denom

#mencari c(b0) c=rata rata Y - (m*rata rata X)
b0 = mean_Y - (b1 * mean_X)

#print koefisien
print(b1,b0)

%matplotlib inline
import matplotlib.pylab as plt
plt.rcParams['figure.figsize'] = (20.0,10.0)


#plotting values and regression line
max_x = np.max(X) + 100
min_x = np.min(X) - 100

#menghitung value garis x dan y
x = np.linspace(min_x, max_x, 1000)
y = b0 + (b1 * x)
#ploting line
plt.plot(x,y, color='#58b970', label = 'Regression Line')

#ploting scatter point
plt.scatter(X,Y, c='#ef5423', label = 'Scatter Plot')

plt.xlabel('JKSE')
plt.ylabel('BRIS')
plt.legend()
plt.show

#square
ss_t = 0
ss_r = 0
for i in range(m):
    y_pred = b0 + b1 * X[i]
    ss_t += (Y[i] - mean_Y) ** 2
    ss_r += (Y[i] - y_pred) ** 2
r2 = 1 - (ss_r/ss_t)

print(r2)
